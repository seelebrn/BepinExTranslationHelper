
using UnityEngine.UI;
using Unity.TextMeshPro;
using UnityEngine.InputLegacyModule;
...

private void Update()
{
if (Input.GetKeyUp(KeyCode.F2) == true)
            {
                //We scan for UI.Text and TMPro objects
                var alltext = UnityEngine.UI.Text.FindObjectsOfType<UnityEngine.UI.Text>();
                var alltmp = TextMeshProUGUI.FindObjectsOfType<TextMeshProUGUI>();
                foreach (var x in alltext)
                {
                    //Your translations must be in a dict. Its name can vary. Here it's translation dict. It must contain your source strings as keys and your translation as values. 
                    //keystoupdate is another dict<string,string>, created before Update() runs. It's currently emputy.
                    if (translationDict.ContainsValue(x.text) && !keystoupdate.ContainsValue(x.text))
                    {
                        //My dict has ¤ as a separator betwewen keys and values. Adapt as needed.
                        keystoupdate.Add(translationDict.FirstOrDefault(zz => zz.Value == x.text).Key, x.text);
                        Debug.Log("KeyToUpdate filled with " + translationDict.FirstOrDefault(z => z.Value == x.text).Key + "¤" + x.text);
                    }


                }

                foreach (var y in alltmp)
                {
                    if (translationDict.ContainsValue(y.text) && !keystoupdate.ContainsValue(y.text))
                    {
                        keystoupdate.Add(translationDict.First(z => z.Value == y.text).Key, y.text);
                        Debug.Log("KeyToUpdate filled with " + translationDict.FirstOrDefault(z => z.Value == y.text).Key + "¤" + y.text);
                    }
                }
                translationDict.Clear();

                //Awake(), in this instance, is just a method in which I populate the dict from a file (and this code wasn't made by me, that's why I'm not sharing it). It reads the content of a csv file and turns it into a dict. There are plenty of examples to help you do so.
                //So, in short, after clearing the dict with translationdict.Clear(), we're not re-generating it. Since the dict has been edited prior to the user pressing F2, the new dict will differ from the old dict. The difference will be the changes we've made.
                Awake();

                //So, for each text item displayed on screen... (first UnityEngine.UI.Text, then TMP)
                foreach (var x in alltext)
                {
                    We're searching for the original key (here, untranslated Chinese string), which value (modified/translated string) was already displayed in-game before the dict change. 
                    var chstring = keystoupdate.FirstOrDefault(zz => zz.Value == x.text).Key;
                    if (x.text != "" && x.text != null)
                    {
                        //If keystoupdate we populated earlier indeed contains the old value, and **if the original key indeed has a corresponding value in the new dict**
                        if (keystoupdate.ContainsValue(x.text) && translationDict.ContainsKey(chstring))
                        {
                            Debug.Log("Old Translation = " + x.text);
                            Debug.Log("Original Language String = " + chstring);
                            Debug.Log("New Translation = " + translationDict[chstring]);

                            if (x.text != translationDict[chstring])
                            {
                                //Now it's easy, we just take the new/edited value of the original key ! Done!
                                x.text = translationDict[chstring];
                                keystoupdate.Remove(chstring);
                            }
                        }
                    }
                }
                foreach (var y in alltmp)
                {
                    if (y.text != "" && y.text != null)
                    {
                        var chstring2 = keystoupdate.FirstOrDefault(zz => zz.Value == y.text).Key;
                        if (keystoupdate.ContainsValue(y.text) && translationDict.ContainsKey(chstring2))
                        {

                            Debug.Log("Old Translation = " + y.text);
                            Debug.Log("Original Language String = " + chstring2);
                            Debug.Log("New Translation = " + translationDict[chstring2]);

                            if (y.text != translationDict[chstring2])
                            {
                                y.text = translationDict[chstring2];
                                keystoupdate.Remove(chstring2);
                            }
                        }
                    }
                }
            }
}
